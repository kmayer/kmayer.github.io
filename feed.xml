<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ken Mayer</title>
    <description>Ramblings about technology, traveling, sailing, family, entrepeneurship. Mostly ramblings.
</description>
    <link>http://blog.bitwrangler.com/</link>
    <atom:link href="http://blog.bitwrangler.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 12 Nov 2016 07:32:51 -0800</pubDate>
    <lastBuildDate>Sat, 12 Nov 2016 07:32:51 -0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Sacrificial Test Classes</title>
        <description>&lt;p&gt;Today I learned that there’s a difference between a throw-away class and a sacrificial class. When writing rspec tests, you want the latter; otherwise you might create some very hard-to-debug test pollution.&lt;/p&gt;

&lt;p&gt;Until today, I would create a throw-away test class in my rspec tests, especially when unit testing a module:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestClass&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModule&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tests something'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyTestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It turns out that this is a &lt;em&gt;terrible&lt;/em&gt; thing to do because it will pollute your global name space with &lt;code class=&quot;highlighter-rouge&quot;&gt;MyTestClass&lt;/code&gt;. In my naïve understanding of rspec, I thought that things created &lt;em&gt;inside&lt;/em&gt; the rspec block would be scoped to that block. This is very much the case when writing tests in &lt;code class=&quot;highlighter-rouge&quot;&gt;MiniTest&lt;/code&gt;; you are just creating classes and methods, so a little private class can’t &lt;em&gt;leak&lt;/em&gt; out of your test examples. Not so when writing rspec tests. There’s a GitHub issue about it that gives some good explanations about the hows and why: &lt;a href=&quot;https://github.com/rspec/rspec-core/issues/2181&quot;&gt;https://github.com/rspec/rspec-core/issues/2181&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s another, simpler, example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;ss&quot;&gt;irb: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;===&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;===&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uninitialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;===&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo2&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;===&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;irb: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;warning: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toplevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;referenced&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;===&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yikes! &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo2&lt;/code&gt; are roughly similar class, but &lt;code class=&quot;highlighter-rouge&quot;&gt;BAR&lt;/code&gt; is scoped to &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo1&lt;/code&gt;, as in, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo1::BAR&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo2&lt;/code&gt; created a top level constant named &lt;code class=&quot;highlighter-rouge&quot;&gt;BAR&lt;/code&gt;. You can see how this might make your tests break. &lt;a href=&quot;https://github.com/myronmarston&quot;&gt;Myron Marston&lt;/a&gt; explained in the issue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While not ideal, it’s known, expected behavior. In Ruby, when you define a constant in a block, it uses the module scoping of whatever is outside the block as the constant namespace. … This is simply how Ruby works and there’s nothing RSpec can do about this. (And since it’s how ruby works, I’m not sure that we should try to do anything different.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what should we do, if these throw-away classes are not so temporary? My example gives a hint: Create a “sacrificial class,” instead, using a &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; variable instead, since those variables &lt;em&gt;are&lt;/em&gt; scoped to the example group.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_test_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModule&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tests something'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_test_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There, all better. No more test pollution.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 -0800</pubDate>
        <link>http://blog.bitwrangler.com/2016/11/10/sacrificial-test-classes.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2016/11/10/sacrificial-test-classes.html</guid>
        
        
      </item>
    
      <item>
        <title>Memory Leak Whack-a-Mole</title>
        <description>&lt;p&gt;&lt;label for=&quot;whack-a-mole&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;whack-a-mole&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;img class=&quot;fullwidth&quot; src=&quot;/assets/whack-a-mole.jpg&quot; /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.flickr.com/photos/tpapi/2765541278&quot;&gt;https://www.flickr.com/photos/tpapi/2765541278&lt;/a&gt;&lt;/span&gt;Memory leaks happen. They shouldn’t, but you just can’t squash enough of them. Or the leak is so slow that it takes hours to manifest. The trouble with memory leaks is that they are permanent for the life of a process. Once a process has expanded its &lt;a href=&quot;http://stackoverflow.com/questions/7880784/what-is-rss-and-vsz-in-linux-memory-management&quot;&gt;VSZ&lt;/a&gt;, there’s no way in Unix to shrink it. So your process starts to bloat, eventually your servers &lt;a href=&quot;http://www.folkstalk.com/2011/11/swapping-and-paging-in-unix.html&quot;&gt;page&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Thrashing_(computer_science)&quot;&gt;thrash&lt;/a&gt;. Performance tanks. Then your pager starts going off and there goes your beauty sleep.&lt;/p&gt;

&lt;p&gt;On your own servers this is when &lt;a href=&quot;https://en.wikipedia.org/wiki/Init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mmonit.com/monit/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monit&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://godrb.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;god&lt;/code&gt;&lt;/a&gt; come into play; they watch your production processes for signs of trouble and then issue restarts. On &lt;a href=&quot;https://heroku.com&quot;&gt;Heroku&lt;/a&gt; and other PaaS, you don’t have access to these tools, in fact, quite often, you simply &lt;em&gt;can’t&lt;/em&gt; restart a process; the container &lt;em&gt;is&lt;/em&gt; the process. So what can you do? Killing the container might disrupt a critical transaction and piss off a user. Are you running a bunch of background tasks in &lt;a href=&quot;https://github.com/mperham/sidekiq&quot;&gt;Sidekiq&lt;/a&gt;? What happens if you pull the plug on a 100-thread worker?&lt;/p&gt;

&lt;p&gt;The general recipe that &lt;em&gt;won’t&lt;/em&gt; impact performance nor threaten data loss is as follows: &lt;br /&gt;&lt;br /&gt;1. Detect the problem (trickier than you think);&lt;br /&gt;2. Receive a &lt;a href=&quot;https://en.wikipedia.org/wiki/Webhook&quot;&gt;webhook&lt;/a&gt;;&lt;br /&gt;3. Signal&lt;label for=&quot;signals&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;signals&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Not to confuse you, but I’m &lt;em&gt;not&lt;/em&gt; talking about &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_signal&quot;&gt;Unix signals&lt;/a&gt;. I just mean “Send a message from one running process to another over some channel.” &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;signal(7)&lt;/a&gt; might be used as the channel, but that’s an implementation detail. &lt;/span&gt; the process to stop accepting new work;&lt;br /&gt;4. Wait for the process to finish all “in-flight” work and go “quiet,” and finally;&lt;br /&gt;5. Signal the process to exit, allowing your cloud infrastructure to create a new container instance with a fresh memory footprint.&lt;br /&gt;&lt;br /&gt;The challenges are that you might not be able to monitor &lt;em&gt;within&lt;/em&gt; the same container, or that logs are streaming to an outside consumer. In addition, each application has different designs for signal handling.&lt;/p&gt;

&lt;h2 id=&quot;detection&quot;&gt;Detection&lt;/h2&gt;

&lt;p&gt;Heroku will insert log messages into your application’s &lt;a href=&quot;https://devcenter.heroku.com/articles/logging&quot;&gt;log stream&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Error R14&lt;/code&gt; for example, which signals that your container is over it’s memory quota.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;Bad things are about to happen.&lt;/figcaption&gt;&lt;img src=&quot;/assets/heroku-log-entry.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;You need to have a service that consumes the log stream, looks for patterns (regular expressions) and then triggers an action. &lt;a href=&quot;https://logentries.com/&quot;&gt;Logentries.com&lt;/a&gt; has such a facility, but others do, too. It is best to experiment with a few of them before making a commitment.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;Stand back! I know regular expressions!&lt;/figcaption&gt;&lt;img src=&quot;/assets/error-r14-regexp.png&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;receiving-the-webhook&quot;&gt;Receiving the Webhook&lt;/h2&gt;

&lt;p&gt;One of Logentries features is the ability to send a webhook when a regular expression matches. Let’s create a controller that will accept the webhook message.&lt;label for=&quot;webhook-message-format&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;webhook-message-format&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The message format is vendor-specific, but it should be well documented. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;logentries-auth&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;logentries-auth&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LogentriesAuth&lt;/code&gt; is a special helper class to confirm that the message is authentic. We wouldn’t want some nefarious third party injecting messages into our system and restarting our servers over and over again, would we? A gist of it is available here, under the MIT license. &lt;a href=&quot;https://gist.github.com/kmayer/f7e5a6ebb9414bb97b1cdd586aced18a&quot;&gt;https://gist.github.com/kmayer/f7e5a…&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogentriesAlertsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;skip_before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_authenticity_token&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:unprocessable_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;LogentriesAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authorized?&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# do something here...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once we’ve parsed the message and determined that we can act on it, we need to send a message, in this first case, to &lt;a href=&quot;http://puma.io/&quot;&gt;Puma&lt;/a&gt;. We’ll leverage a well known and commonly used service, &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;, as a general delivery post office; we’ll write a key/value pair and Puma will check for the key &lt;code class=&quot;highlighter-rouge&quot;&gt;puma::stop::#{hostname}&lt;/code&gt; (where hostname looks like “&lt;code class=&quot;highlighter-rouge&quot;&gt;web.5&lt;/code&gt;”). If the key is present, it will start the orderly shutdown process.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;private&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;private&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;For brevity, I’ve omitted the &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; helper methods used in the controller. A complete gist is available here: &lt;a href=&quot;https://gist.github.com/kmayer/abed3364ccd6906c2751a1dc51b604a8&quot;&gt;https://gist.github.com/kmayer/abed3…&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:unprocessable_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;LogentriesAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authorized?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/R1[45]/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
         &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/web\.\d+/&lt;/span&gt;         
      &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;puma::stop::&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;*** HEROKU ERROR &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ***&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;ss&quot;&gt;ex: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;signal-the-application-to-stop-accepting-new-work&quot;&gt;Signal the application to stop accepting new work&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;&lt;a href=&quot;http://puma.io&quot;&gt;Puma&lt;/a&gt;&lt;/span&gt;  version 3 has a new feature that allows you to add &lt;a href=&quot;https://github.com/puma/puma#plugins&quot;&gt;custom plugins&lt;/a&gt;. With it, you can use Puma’s API to signal itself to stop; it will handle the rest of the clean up on its own. This  custom plugin checks Redis for the “message” set by our controller. Puma background threads are lightweight enough that they won’t impact performance.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'puma/plugin'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redis'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Puma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;launcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Heroku sets this environment variable&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DYNO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# we can haz Redis?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PONG'&lt;/span&gt; 

    &lt;span class=&quot;n&quot;&gt;signal_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;puma::stop::&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;in_background&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;launcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Okay, all of the pieces are in place so we can do some integration tests. Let’s inject a log entry that looks close enough to match our regular expressions to trigger the alert.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'heroku web.1 - - Error R14 (Memory quota exceeded)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If all goes well, you should see the message hit your log, then sometime later, a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;LogentriesAlertsController&lt;/code&gt;, then a key/value pair inserted into Redis and finally, your Puma instance quitting. Your PaaS will spawn a new replacement with a clean, fresh serving of memory.&lt;/p&gt;

&lt;h2 id=&quot;wait-for-the-process-to-finish-all-in-flight-work&quot;&gt;Wait for the process to finish all “in-flight” work&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;&lt;a href=&quot;https://github.com/mperham/sidekiq&quot;&gt;Sidekiq&lt;/a&gt;&lt;/span&gt;  is a little trickier; It has an &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/API#processes&quot;&gt;API&lt;/a&gt; for going quiet, which will complete all in-flight work, and won’t pull any new jobs off the queue; it has &lt;code class=&quot;highlighter-rouge&quot;&gt;#stop!&lt;/code&gt; which will signal the main process to exit. But there’s no API call that says, “go quiet, then quit.” That’s okay, it’s easy enough to build a little class to wrap the Sidekiq process control API:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SidekiqControl&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quiet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quiet!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'busy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quiet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:stop!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processes&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ProcessSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hostname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;signal-the-process-to-exit&quot;&gt;Signal the Process to Exit&lt;/h2&gt;

&lt;p&gt;Also, unlike Puma, there isn’t a similar plugin architecture for running arbitrary background threads. So we’ll build a little &lt;code class=&quot;highlighter-rouge&quot;&gt;rake&lt;/code&gt; task:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sidekiq:stop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'environment'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sq_ctl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SidekiqControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sq_ctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and now, let’s modify the controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogentriesAlertsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/R1[45]/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/sidekiq\.\d+/&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake sidekiq:stop[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] &amp;amp;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Again, we can do a quick integration test by injecting another log entry.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'heroku sidekiq.1 - - Error R14 (Memory quota exceeded)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ken-thats-a-lot-of-work-is-it-worth-it&quot;&gt;Ken, that’s a lot of work! Is it worth it?&lt;/h2&gt;

&lt;p&gt;Boy, howdy! I have a Sidekiq worker that handles a “critical” job queue, for, you know, &lt;em&gt;critical&lt;/em&gt; jobs. Every now and then a user submits a job with a ginormous data set that just makes our Nokigiri parser bloat like that guy from &lt;a href=&quot;https://www.youtube.com/watch?v=klVhwlwHhY4&quot;&gt;“Big Trouble In Little China.”&lt;/a&gt; If it weren’t for my suite of tools, the worker exceeds it’s memory allocation and grinds to a slow crawl. Instead, we signal the worker, spawn a new one, and work goes on it’s merry way.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;Winning at whack-a-mole.&lt;/figcaption&gt;&lt;img src=&quot;/assets/heroku-critical-metrics.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This keeps my application running and my users happy. I can also allocate the technical debt-service at a time of my choosing, instead of being forced to react to a crisis. Is it perfect? Hell, no, but my pager rings less.&lt;/p&gt;

&lt;p&gt;Oh, yeah, and remember:&lt;/p&gt;

&lt;h2 id=&quot;fix-the-damn-leaks&quot;&gt;Fix the damn leaks!&lt;/h2&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 00:00:00 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2016/10/27/memory-leak-whack-a-mole.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2016/10/27/memory-leak-whack-a-mole.html</guid>
        
        <category>devops</category>
        
        <category>puma</category>
        
        <category>heroku</category>
        
        <category>sidekiq</category>
        
        <category>redis</category>
        
        <category>rails</category>
        
        
      </item>
    
      <item>
        <title>Digital Preservation Lasts Until the Heat Death of the Universe or Five Years</title>
        <description>&lt;p&gt;(Whichever comes first)&lt;/p&gt;

&lt;p&gt;Here are my notes and references from my lightning talk. The slides for the talk itself can be found on &lt;a href=&quot;https://dl.dropboxusercontent.com/u/759959/Digital%20Preservation.key&quot;&gt;DropBox&lt;/a&gt;. Warning this is about &lt;em&gt;~150MB&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Here’s the article that inspired this talk, &lt;a href=&quot;http://www.clir.org/pubs/archives/ensuring.pdf&quot;&gt;Ensuring the Longevity of Digital Information&lt;/a&gt;, written by Jeff Rothenberg waaay back in 1995 for &lt;a href=&quot;http://www.scientificamerican.com/article/ensuring-the-longevity-of-digital-d/&quot;&gt;Scientific American&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The year is 2045, and my grandchildren (as yet unborn) are exploring the attic of my house (as yet unbought). They find a letter dated 1995 and a CD-ROM (compact disk). The letter claims that the disk contains a document that provides the key to obtaining my fortune (as yet unearned). My grandchildren are understandably excited, but they have never seen a CD before—except in old movies—and even if they can somehow find a suitable disk drive, how will they run the software necessary to interpret the information on the disk? How can they read my obsolete digital document?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to read more by Mr. Rothenberg about digital longevity, he has a &lt;a href=&quot;http://www.panix.com/~jeffr/Prof/digilong.html&quot;&gt;web page for it&lt;/a&gt;. And here, at the &lt;a href=&quot;http://www.clir.org/pubs/reports/rothenberg/contents.html&quot;&gt;Council on Library and Information Resources&lt;/a&gt;. If video is more your thing, on YouTube: &lt;a href=&quot;https://www.youtube.com/watch?v=2Idbur1qR8I&quot;&gt;How Far We’ve Come&lt;/a&gt;. Just so you know that there are other views, and other voices, &lt;a href=&quot;http://blog.dshr.org/2013/02/rothenberg-still-wrong.html&quot;&gt;Rothenberg &lt;em&gt;still&lt;/em&gt; Wrong&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;On the scale of our data collections.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://what-if.xkcd.com/63/&quot;&gt;Google’s Datacenters on Punch Cards&lt;/a&gt;, “what if?” ca 2013&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lost data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.wsj.com/law/2014/08/26/thousands-of-electronic-case-files-lost-in-transition/&quot;&gt;“Thousands of Electronic Case Files Lost in Transition”&lt;/a&gt;, Wall Street Journal, August 26, 2014.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://haveibeenpwned.com&quot;&gt;have i been pwned?&lt;/a&gt;, which I check every time I hear of yet another breach.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Legacy systems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gao.gov/assets/680/677436.pdf&quot;&gt;Federal Agencies Need to Address Aging Legacy Systems&lt;/a&gt;, GAO Report, GAO-16-468, May 2016.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnn.com/2016/05/26/us/pentagon-floppy-disks-nuclear/&quot;&gt;The U.S. is still using floppy disks to run its nuclear program&lt;/a&gt;, CNN, May 26, 2016.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Digital preservation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fortune.com/2016/06/22/google-link-supreme-court-citation/&quot;&gt;Google Link in Supreme Court Case Shows Struggle on Citation&lt;/a&gt;, Fortune, June 22, 2016.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.supremecourt.gov/opinions/15pdf/14-1373_83i7.pdf&quot;&gt;Utah v. Strieff&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://perma.cc&quot;&gt;https://perma.cc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://digital.lib.umd.edu&quot;&gt;Digital Collections at the University of Maryland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://archive.org&quot;&gt;The Wayback Machine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jsonapi.org&quot;&gt;{json:api}&lt;/a&gt;, “If you’ve ever argued with your team about the way your JSON responses should be formatted, JSON API can be your anti-bikeshedding tool.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IRGz-tNBeXM&quot;&gt;IBM TS4500 Tape Libray Robots&lt;/a&gt;. I, for one, welcome our benevolent robot overlords.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cambus.net/emulators-written-in-javascript/&quot;&gt;Emulators written in JavaScript&lt;/a&gt;. JavaScript has become the “Rosetta Stone” of all other digital systems. So, we might be able to emulate ancient hardware, after all. We’re ready to go back to the moon: &lt;a href=&quot;http://svtsim.com/moonjs/agc.html&quot;&gt;Apollo Guidance System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OMG&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sploid.gizmodo.com/this-old-ass-commodore-64-is-still-being-used-to-run-an-1787196319&quot;&gt;This Old-Ass Commodore 64 Is Still Being Used to Run an Auto Shop in Poland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.theverge.com/2016/5/3/11576032/mclaren-f1-compaq-laptop-maintenance&quot;&gt;McLaren needs a 20-year-old Compaq laptop to maintain its F1 supercar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the feels&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.flickr.com/photos/projectapolloarchive/&quot;&gt;Project Apollo&lt;/a&gt; - Glorious scans of the original Hasselblad images.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/kate-dohe-076a103&quot;&gt;Kate Dohe&lt;/a&gt;, “punk-ass book jockey.” For more on knitting, wine and bicycles, sometimes all at once, see &lt;a href=&quot;https://www.facebook.com/katedohe&quot;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2016/10/04/digital-preservation.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2016/10/04/digital-preservation.html</guid>
        
        
      </item>
    
      <item>
        <title>Anatomy of an Apology</title>
        <description>&lt;p&gt;I’ve written my fair share of apologies. It’s a skill, like any other, one that you wish you didn’t have to practice. Yesterday, I had to write a &lt;em&gt;mea culpa&lt;/em&gt; to our users. It was our fault, and we came clean about it. I got compliments on the letter! I think I increased customer loyalty as a result. Fuck-ups don’t have to hurt your business.&lt;/p&gt;

&lt;p&gt;Here’s the letter:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;E-mail from me to my user base&lt;/figcaption&gt;&lt;img src=&quot;/assets/Screen_Shot_2016-09-22_at_9_00_06_AM.png&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;write-the-tldr&quot;&gt;1. Write the tl;dr&lt;/h2&gt;

&lt;p&gt;You don’t have to get into specifics; assess the impact to them. Don’t bother with “I’m sorry,” just stick to the facts, m’am.&lt;/p&gt;

&lt;h2 id=&quot;whats-this-about&quot;&gt;2. What’s this about&lt;/h2&gt;

&lt;p&gt;Okay, now go into detail about what changed. In this case, we completely removed a feature. I described what the feature was, where it was located in our application and &lt;em&gt;why&lt;/em&gt; it existed in the first place.&lt;/p&gt;

&lt;h2 id=&quot;why-we-had-to-make-the-change&quot;&gt;3. Why we had to make the change&lt;/h2&gt;

&lt;p&gt;Keep it simple. My users are attorneys, associates, librarians and paralegals. They are smart people, but not very technical.&lt;/p&gt;

&lt;h2 id=&quot;why-now&quot;&gt;4. Why &lt;em&gt;now&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This feature has been in production for months. We knew about the risk, but we decided it was an acceptable one. Until two days ago. Normally, if we have a feature that we plan to remove, we’ll make time for the transition, warn the users in advance, and ease them out of it gracefully. This week was not normal. &lt;em&gt;That&lt;/em&gt; is what we fucked up. We knew this was a potential problem, but did not properly assess the risks.&lt;/p&gt;

&lt;h2 id=&quot;impact-to-the-reader&quot;&gt;5. Impact to the &lt;em&gt;reader&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Tell them how it hurts. It’s the most important thing that our dear reader needs to know, after all.&lt;label for=&quot;one&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;one&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;After reading the letter, with hindsight, I would have moved this up to the second paragraph. &lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;remedial-actions-on-our-part&quot;&gt;6. Remedial actions on our part&lt;/h2&gt;

&lt;p&gt;What we’re doing to make up for the failure.&lt;/p&gt;

&lt;h2 id=&quot;recognize-the-value-of-the-reader&quot;&gt;7. Recognize the value of the reader&lt;/h2&gt;

&lt;p&gt;I appreciate my clients. Not only because they put bread on my table, but because, without them, I wouldn’t have a product to build. Loyal customers give me honest feedback, which makes PacerPro all that much better in the next iteration.&lt;/p&gt;

&lt;h2 id=&quot;make-it-personal&quot;&gt;8. Make it personal&lt;/h2&gt;

&lt;p&gt;I gave them my e-mail, my phone number (which I will personally answer). And I said “Thank you.”&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2016/09/22/anatomy-of-an-apology.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2016/09/22/anatomy-of-an-apology.html</guid>
        
        <category>management</category>
        
        
      </item>
    
      <item>
        <title>Guidelines for Using Pivotal Tracker</title>
        <description>&lt;p&gt;I am often asked about the meaning of things in Pivotal Tracker, such as “What’s the difference between a bug and a chore?” Or, “How can I tell the difference between a bug and a feature?” Another oldie but a goodie is, “What story should I pick from the backlog?” Here are my biased answers.&lt;/p&gt;

&lt;p&gt;But first:&lt;/p&gt;

&lt;h2 id=&quot;a-groomed-backlog-is-no-substitute-for-good-judgement&quot;&gt;A Groomed Backlog is No Substitute for Good Judgement&lt;/h2&gt;

&lt;p&gt;No matter what you might hope, there is no substitute for good judgement. You should always ask yourself, “What is in the best interest of PacerPro?” If you can’t answer that question, then stop, go find someone who &lt;em&gt;does&lt;/em&gt; know before continuing. Great employees will not only do what’s expected of them, but also do what is best for the company.&lt;/p&gt;

&lt;h2 id=&quot;tracker-stories-are-focused-on-delivering-business-value&quot;&gt;Tracker Stories Are Focused on Delivering Business Value&lt;/h2&gt;

&lt;p&gt;Tracker has four and &lt;em&gt;only&lt;/em&gt; four types of stories: &lt;code class=&quot;highlighter-rouge&quot;&gt;Feature&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bug&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Chore&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-feature-has-quantifiable-business-value&quot;&gt;A “feature” has quantifiable business value&lt;/h3&gt;

&lt;p&gt;Here’s my formal definition:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A &lt;em&gt;feature&lt;/em&gt; is a story that was requested by the [client] stakeholder and has quantifiable business value.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are some really important concepts to consider here. The story &lt;em&gt;must&lt;/em&gt; come from a stakeholder, that is, someone who can make decisions based on &lt;em&gt;business priorities&lt;/em&gt;. As a general rule, engineers should not request feature stories, not because they can’t, but because they don’t generally see the business side of things.&lt;label for=&quot;business-value&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;business-value&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;I don’t keep a lot of secrets. I’ll try to explain the back-story if I can. If everyone knows the business value and complexity of a story, then we can all help ensure that we’re maximizing business value for the company. &lt;/span&gt; Let’s be honest, however, stakeholders rarely write &lt;em&gt;good&lt;/em&gt; stories, so in general, stories will be written in partnership (pairing) with them. As CTO, I will often trade my engineering hat for a business hat and write feature stories. You may not see the hat switch, but it is there. Ask me, “Which hat are you wearing?” if you are unsure. On the other hand, if you can’t make a judgement based on business priorities, then you shouldn’t be writing stories, either.&lt;/p&gt;

&lt;p&gt;The other component of &lt;em&gt;feature&lt;/em&gt; stories is that they have &lt;em&gt;quantifiable business value&lt;/em&gt;. Stories cost time to deliver. Time that could be spent on other stories. We want to maximize the financial leverage of our work so that we deliver the most value for the least cost. There’s some local maxima at work here, and since our business landscape changes so quickly, we’re only hoping for something measurable in the 90 days after delivery. This is a nod to &lt;a href=&quot;http://firstround.com/review/This-Product-Prioritization-System-Nabbed-Pandora-More-Than-70-Million-Active-Monthly-Users-with-Just-40-Engineers/&quot;&gt;Pandora’s planning criterion&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“What would be stupid not to do in the next 90 days.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During planning sessions you may hear me ask the stakeholders, “What’s the business value of this story, in rough dollars?” If all I get in reply is hemming and hawing, I will politely but firmly push back; This story is not ready, or not really &lt;em&gt;that&lt;/em&gt; high a priority. There’s an old definition of “urgency,” something that is time critical, but you can have &lt;em&gt;unimportant&lt;/em&gt; urgencies. Those stories are not the most important ones to complete. You, as engineers, should know what the quantifiable business value is for a story, and you should ask if you don’t know.&lt;label for=&quot;research-stories&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;research-stories&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Sometimes, we won’t be able to estimate a story’s cost without some research, perhaps some spiking. I’ll break that out into a separate story whose sole output is an estimated cost of the feature. &lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-bug-is-a-defect-introduced-during-the-delivery-of-a-feature&quot;&gt;A “bug” is a defect introduced during the delivery of a feature&lt;/h3&gt;

&lt;p&gt;Bugs are a drag on velocity.&lt;label for=&quot;velocity&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;velocity&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;See my earlier article on velocity: “&lt;a href=&quot;/2013/02/19/its-the-volatility-that-will-kill-you.html&quot;&gt;It’s the Volatility that Will Kill You&lt;/a&gt;” &lt;/span&gt; It slows down our ability to deliver feature stories. There’s really no such thing as zero-defect software and achieving that becomes asymptotically expensive. So we want a process where we minimize bugs for a reasonable expense. That’s why we have tests, continuous integration testing, code quality metrics, quality assurance and multiple staged servers, to name a few. That’s also why we don’t maintain a JIRA installation; it costs more to maintain than we got in reducing our defect rate.&lt;/p&gt;

&lt;p&gt;Not all bugs are equal. We prioritize them by business value, too. We can measure value in terms of loss of customers, reduced adoption rate, or even a hit to our brand value. Some bugs are more expensive to fix than others, too. This is one of the pain points of using Pivotal Tracker; there’s no direct way to indicate the &lt;em&gt;cost&lt;/em&gt; of &lt;em&gt;fixing&lt;/em&gt; the bug. In this respect, in the eyes of Tracker, all bugs are equal. I’ve found this not to be true in real life. Some bugs are easy to fix, or easy to fix &lt;em&gt;right now&lt;/em&gt; while we still have &lt;em&gt;context&lt;/em&gt; to fix the bug. Bugs to fix in the backlog are in roughly the priority to be fixed, but there’s usually a lot more wiggle room than in feature stories.&lt;/p&gt;

&lt;h3 id=&quot;a-release-is-a-time-constraint&quot;&gt;A “release” is a time constraint&lt;/h3&gt;

&lt;p&gt;Tracker doesn’t set many deadlines because most deadlines are bogus. Well, arbitrary. Okay, bullshit. That’s because when they are imposed from above, or don’t reflect any business realities, or don’t adjust to the changing landscape of our business, we’re not maximizing value. And things change, fast. That’s what “agile” means, right? This is not to say that “agile” is an excuse not to deliver on time, either. We want to be &lt;em&gt;realistic&lt;/em&gt; about our deliveries. Hence we have “releases.” They &lt;em&gt;can&lt;/em&gt; answer two important questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have an “epic” that must be delivered by an externally imposed date. Will we make it, with confidence?&lt;/li&gt;
  &lt;li&gt;How long will an “epic” take to complete? Is the overall cost worth it? Will it impact other commitments?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are &lt;em&gt;lots&lt;/em&gt; of external events that are beyond our direct control: Trade shows, press release dates, legal contracts, holidays, even election day!&lt;/p&gt;

&lt;p&gt;Finally, and, least of all&lt;/p&gt;

&lt;h3 id=&quot;chores-are-internal-stories-that-must-be-done-but-have-no-quantifiable-business-value&quot;&gt;“Chores” are internal stories that must be done, but have no quantifiable business value&lt;/h3&gt;

&lt;p&gt;Chores are closely related to bugs, in that they don’t have points, so they are also a drag on velocity. Consider them “the cost of doing business.” Where they differ is that chores do not arise as a defect when delivering a feature. They are usually internal engineering work, such as setting up new servers, or renewing an SSL certificate. We also use them as an &lt;em&gt;ad hoc&lt;/em&gt; to-do list, e.g. when we need to provision new users for a client. Those requests &lt;em&gt;could&lt;/em&gt; be seen as help desk tickets&lt;label for=&quot;help-desk&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;help-desk&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;I need to write a whole other post about help desk operations. &lt;/span&gt;, and I may change my mind on this, but for now we’re just going with the flow.&lt;/p&gt;

&lt;p&gt;One thing that I am adamantly opposed to are &lt;em&gt;chores to address technical debt&lt;/em&gt;. Stories like “code reviews” or “large refactoring.” They are part of our normal story workflow and &lt;em&gt;not&lt;/em&gt; an after-thought. If a big refactor is necessary for a story, then so be it. Add that cost to the complexity of the story.&lt;label for=&quot;refactoring-not-a-story&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;refactoring-not-a-story&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;See, &lt;a href=&quot;http://ronjeffries.com/xprog/articles/refactoring-not-on-the-backlog/&quot;&gt;“Refactoring – Not on the backlog!”&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-should-i-do-next&quot;&gt;What Should I Do Next?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The Most Important Thing”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In theory always try to take the next &lt;em&gt;ready&lt;/em&gt; story off the &lt;em&gt;top&lt;/em&gt; of the &lt;em&gt;backlog&lt;/em&gt;. In practice it is not always so simple. It goes back to judgement. Before you click the start button, review the story for readiness and business value. Ask yourself, “Self? Has the business landscape &lt;em&gt;changed&lt;/em&gt; since the last time we looked at this story? Is it truly the &lt;em&gt;most important thing to do&lt;/em&gt;?” You have the responsibility and authority to “pull the yellow cord&lt;label for=&quot;kanban&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;kanban&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;A kanban concept. When there is trouble on an assembly line, any worker is empowered to sound an alarm by pulling a bright yellow cord. Anyone available, including managers, rush to the trouble spot to correct the problem and keep the line running. Later, there would be a &lt;em&gt;post mortem&lt;/em&gt; to prevent the problem from happening again. &lt;/span&gt;.”&lt;/p&gt;

&lt;h3 id=&quot;start--started&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(START) =&amp;gt; [Started]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Pressing the (Start) button commits you to see the story through delivery and acceptance. You are empowered to choose any solution path that, in your professional judgement, is the most cost effective (in terms of time, resources and maintainability). You are also shielded from working on any other story until the current story is completed (or reasonably blocked).&lt;label for=&quot;scheduling&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;scheduling&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Let’s say that you’ve finished merging and are waiting for CI to deploy to staging for QA. It’s a good time to take a break and celebrate, but if you want to kill off a few Zendesk tickets while you’re waiting, go for it. Just don’t lose track of the main story. &lt;/span&gt; There’s ample research that shows that context switching costs &lt;em&gt;more&lt;/em&gt; than just doing one thing, well.&lt;label for=&quot;context-switching&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;context-switching&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://www.psychologytoday.com/blog/brain-wise/201209/the-true-cost-multi-tasking&quot;&gt;The True Cost of Multi Tasking&lt;/a&gt;, “Psychology Today”, September 18, 2012 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Blocked!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When a story gets blocked, you’re first priority is to unblock it. If that’s not possible, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;blocked&lt;/code&gt; tag to the story. Announce that you’re blocked on Slack#engineering. Set a time, at regular intervals, to check up on the blockage. Then, move on to the next story. Announce the blockage at the morning Stand-Up.&lt;/p&gt;

&lt;h3 id=&quot;finish--finished&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Finish) =&amp;gt; [Finished]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Pressing the (Finish) button tells the team that development work is done and that a pull-request is pending on GitHub for review. You can start the pull-request at any time, not just at the end. There is a process pattern where you start the pull-request as soon as you create the story branch. I like it because I get early feedback from CircleCI and CodeClimate. YMMV. Announce the pull-request and &lt;em&gt;ask&lt;/em&gt; for feedback. Review criteria will vary, but at a minimum, CI is green, the code adheres to the style-guide (via CodeClimate reports), QA testing on the local development system confirms that the story delivers, &lt;em&gt;in real life&lt;/em&gt;, what was originally requested. This is also a good place to show the team the new functionality at the evening Round-Up.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Merge to master, final QA&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once everything is “green,” merge to the master branch (our &lt;em&gt;production ready&lt;/em&gt; branch). Re-test the feature on the staging server and run our QA “smoke tests.”&lt;label for=&quot;smoke-tests&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;smoke-tests&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;We have a small suite of integration tests that can run against a ‘live’ server; either staging or production. These tests assure us that we haven’t broken anything critical and that all services are running properly. &lt;/span&gt; You are now ready to deploy to production at your next opportunity. In general, we believe in deploying early and often. Since our deployments &lt;em&gt;do&lt;/em&gt; take the background job runner (&lt;code class=&quot;highlighter-rouge&quot;&gt;Sidekiq&lt;/code&gt;) off-line, use your judgement about mid-day (10am Eastern to 6pm Pacific) deploys. Re-run the smoke tests against the production server.&lt;/p&gt;

&lt;h3 id=&quot;deliver--delivered&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Deliver) =&amp;gt; [Delivered]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Pressing the (Deliver) button informs the team that the story is now live on production. The story requester is responsible for reviewing the feature and accepting or rejecting it. I expect 99% of the stories to be accepted. Rejecting a story at this point is a process fail: Did you include the requester and stakeholders while developing the feature? Did you ask for design and UX feedback? Did you test it so that you were at least 85% confident of success? Was the story truly “done?”&lt;/p&gt;

&lt;h3 id=&quot;accept--done-or-reject--unstarted&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Accept) =&amp;gt; [Done]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;(Reject) =&amp;gt; [Unstarted]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sometimes, we learn things once the feature is live. That’s okay and not an immediate cause for rejection. Rejection is an indication of a process fail, where we did not deliver the story as envisioned, where there was insufficient communication among the team members. Rejection will trigger a post-mortem and a topic for the next retrospective. On the other hand, if we learn something &lt;em&gt;new&lt;/em&gt;, then create a new bug or feature story. Remember, “bugs are defects that were created during the delivery of a story.” If the story was delivered properly, but it’s not what’s best for the users, create a new feature story and place it appropriately in the backlog, according to its business value.&lt;/p&gt;

&lt;h2 id=&quot;whats-in-the-backlog-and-the-icebox&quot;&gt;What’s in the backlog and the icebox?&lt;/h2&gt;

&lt;p&gt;The backlog contains stories, prioritized according to release dates and value. While we strive to keep a backlog that will support 2-3 weeks of engineering effort, sometimes we fail. I encourage you to speak up about lingering stories that might become critical in the future. These stories are good to bring up during iteration planning.&lt;/p&gt;

&lt;p&gt;The icebox contains stories that have business value in the next 90 days. Everything else isn’t worth keeping. We have a lot of stories with “freezer burn” that I just delete from time to time. You can help by reviewing and tossing the ancient stories.&lt;/p&gt;

&lt;h2 id=&quot;shaddup-already-and-lets-get-to-work&quot;&gt;Shaddup already and let’s get to work!&lt;/h2&gt;

&lt;p&gt;This has been a much longer rant than I intended, but there’s lots of good stuff here. Many thanks to Rob Mee for his brown bag talk, years ago, that inspired the foundation (and of course, hiring me).&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2016/07/25/tracker-guidelines.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2016/07/25/tracker-guidelines.html</guid>
        
        <category>management</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>The Syntax Error That Killed Our Build for a Week.</title>
        <description>&lt;p&gt;Back in the day when I wrote in C and we used X11 with Motif, I was creating a new module based on an existing one, so I just copied and pasted the file from one xterm to another:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I tried to compile it, &lt;em&gt;BOOM&lt;/em&gt;. It complained of a syntax error at the form-feed (that’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;^L&lt;/code&gt; is, ASCII 0xc), which, back in the old days, told the line printer to eject the (gasp) paper page, and start a new one.&lt;/p&gt;

&lt;p&gt;Nowadays, ASCII calls this character “New Page”, but no matter what you call it, it’s whitespace. Compilers don’t even see them. The lexer should have removed it. But there it was, breaking our build, day after day, after day.&lt;/p&gt;

&lt;p&gt;Finally my CTO figured it out. (I’m sorry, Jeff. Obviously, I still bear the scars of this.)&lt;/p&gt;

&lt;p&gt;When I copied the file from one xterm to another, it didn’t copy ASCII 0xc, instead it copied the rendered escape characters, &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; (0x5e 0x4c), which of course, is not parseable.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Dec 2015 14:02:10 -0800</pubDate>
        <link>http://blog.bitwrangler.com/2015/12/12/the-syntax-error-that-killed-our-build-for-a-week.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2015/12/12/the-syntax-error-that-killed-our-build-for-a-week.html</guid>
        
        
      </item>
    
      <item>
        <title>Zero Downtime Migrations</title>
        <description>&lt;p&gt;For any sufficiently large application, you want to minimize interruptions to service while deploying new code. This is especially challenging for migrations on Heroku and other Platforms-as-a-Service, where you have a Catch-22 problem; you want to run your migrations, &lt;em&gt;first&lt;/em&gt;, but you can’t run them until you’ve deployed the migrations to production. Usually, at this point, your new migration-dependent features are in the deploy, too. So when your application restarts, and the migration hasn’t run, yet, your poor application will trip some exceptions, and perhaps, create problems for your users. Of course, you could put the app into maintenance mode, but that creates more downtime for your users.&lt;/p&gt;

&lt;p&gt;The technique described here&lt;label for=&quot;goals&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;goals&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;We try &lt;em&gt;very&lt;/em&gt; hard to make migrations non-destructive so there’s no rollback required. The alternative is much more complicated. This also assumes that all QA tests are complete and the next task on your checklist is to deploy to production. &lt;/span&gt; will allow you to gather your migrations into a separate, deployable, commit, that you can run &lt;em&gt;before&lt;/em&gt; you deploy your features, thus minimizing downtime.&lt;/p&gt;

&lt;h2 id=&quot;the-recipe&quot;&gt;The Recipe&lt;/h2&gt;

&lt;h3 id=&quot;on-a-clean-working-copy-of-your-code&quot;&gt;0. On a clean, working copy of your code&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-patch-file-of-all-migrations-added-since-your-last-production-deploy&quot;&gt;1. Create a patch file of all migrations, added since your last production deploy&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch production
 git diff production/master... -- &lt;span class=&quot;s1&quot;&gt;'db/migrate/'&lt;/span&gt; &amp;gt; patch0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; [git] remote is on Heroku. It can be named anything, but we call it that.&lt;/p&gt;

&lt;h3 id=&quot;check-out-a-branch-starting-at-productionmasters-head&quot;&gt;2. Check out a branch, starting at &lt;em&gt;production/master&lt;/em&gt;’s head&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout production/master -b pre-deploy-migrations
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reset-your-development-database-to-current-state-of-the-production-database&quot;&gt;3. Reset your development database to current state of the production database&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;warning&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;warning&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;em&gt;WARNING&lt;/em&gt; &lt;/span&gt;This will delete &lt;em&gt;all&lt;/em&gt; of your data in your development environment. But that should not be a problem, right? If it is, you have a problem with your development environment.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; rake db:reset
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This also assumes that you’ve been diligent, &lt;em&gt;OCD-diligent&lt;/em&gt;, about keeping your &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt; file synchronized with production.&lt;/p&gt;

&lt;h3 id=&quot;apply-the-patch-file&quot;&gt;4. Apply the patch file&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;patch -p1 &amp;lt; patch0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;run-your-migrations&quot;&gt;5. Run your migrations&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-and-commit-your-changes&quot;&gt;6. Add and commit your changes&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add db/migrate/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
 git add db/schema.rb
 git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;pre-deploy migrations only&quot;&lt;/span&gt;
 git status &lt;span class=&quot;c&quot;&gt;# =&amp;gt; should be &quot;reasonably&quot; empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;re-run-your-test-suite-to-make-sure-nothing-asplodes&quot;&gt;7. Re-run your test suite to make sure nothing ‘asplodes&lt;/h3&gt;

&lt;p&gt;What happens if your tests &lt;em&gt;do&lt;/em&gt; break? &lt;strong&gt;You might have a destructive migration!&lt;/strong&gt; For example, I recently changed a table from single to polymorphic ownership. Instead of adding the columns, &lt;code class=&quot;highlighter-rouge&quot;&gt;owner_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;owner_type&lt;/code&gt;, I renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;organization_id&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;owner_id&lt;/code&gt;. A whole bunch of tests broke. If you continue with these steps, your app will crash when you run the migrations. See Appendix A for some work-arounds.&lt;/p&gt;

&lt;h3 id=&quot;compare-your-commit-against-master&quot;&gt;8. Compare your commit against master&lt;/h3&gt;

&lt;p&gt;Make sure that nothing snuck in by accident. Conceptually, &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt; will represent the state of the database after the migrations have been run, and should exactly match the schema that we want to have for our new feature.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff head..origin/master -- &lt;span class=&quot;s1&quot;&gt;'db/migrate/'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; This should return zero changes!&lt;/span&gt;
 git diff head..origin/master -- &lt;span class=&quot;s1&quot;&gt;'db/schema.rb'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; This should return zero changes!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There &lt;strong&gt;might&lt;/strong&gt; be differences that are okay. You’ll have to do a manual code review to be sure.&lt;/p&gt;

&lt;h3 id=&quot;push-just-this-commit-into-production&quot;&gt;9. Push &lt;strong&gt;just&lt;/strong&gt; this commit into production&lt;/h3&gt;

&lt;p&gt;You can do it by pushing the branch, or merging the commit into your deploy / mainline, rebase it &lt;em&gt;ahead&lt;/em&gt; of your other commits, then push just that sha. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku_san&lt;/code&gt; gem, so, for us, it is a simple shell command (while still on this branch).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake production deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;run-your-migrations-on-your-production-instance&quot;&gt;10. Run your migrations on your production instance&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku run:detached rake db:migrate -r production
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Is this a long running migration? Don’t want Heroku to hang up before your done? What’s this &lt;a href=&quot;https://devcenter.heroku.com/articles/one-off-dynos#running-tasks-in-background&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;run:detached&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;h3 id=&quot;merge-the-branch-into-master&quot;&gt;11. Merge the branch into master&lt;/h3&gt;

&lt;p&gt;It should be a no-op since the code is already there. This is optional, but it keeps git happy for the next deploy.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master
 git merge -m &lt;span class=&quot;s2&quot;&gt;&quot;Merge branch 'pre-deploy-migrations'&quot;&lt;/span&gt; pre-deploy-migrations 
 git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;you-are-ready-to-deploy-to-production&quot;&gt;12. You are ready to deploy to production&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake production deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;clean-up&quot;&gt;13. Clean up&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch -D pre-deploy-migrations
 rm patch0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bask-in-the-glow-of-your-mastery&quot;&gt;14. Bask in the glow of your mastery!&lt;/h3&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;h2 id=&quot;appendix-a-how-to-handle-deprecated-columns&quot;&gt;Appendix A: How to Handle Deprecated Columns&lt;/h2&gt;

&lt;p&gt;Don’t remove them! That would break your existing production code and any rollbacks become infinitely more difficult. Many practitioners &lt;em&gt;never&lt;/em&gt; remove old columns, but I think that’s bad too. Code costs. Maintaining these extra columns, over time, will cost you time and money. Here’s a way to “soft” remove columns until you are &lt;em&gt;sure&lt;/em&gt; that you won’t need them again. I schedule a chore a few iterations in the future with the task of doing the actual removal.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YourModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: https://www.pivotaltracker.com/story/show/...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;columns&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_column_name_&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
 &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;appendix-b-copy-data-to-new-columns&quot;&gt;Appendix B: Copy Data to New Columns&lt;/h2&gt;

&lt;p&gt;Making copies to a new column is safe (and “disks” are “cheap”), although it does open a window where your data will be inconsistent. In your migrations, make SQL calls to copy a column from the old to the new. There is a down side to this, especially on very large tables. You want tall, narrow tables for efficiency and performance. This does neither. So plan accordingly.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YourMigration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_new_column_name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
      UPDATE _table_name_ SET _new_column_name_ = _old_column_name_;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;    SQL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you are using MySQL, you might need the help of the Large Hadron Migrator to keep your site up and running while you copy over the data.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 19:35:44 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2015/08/15/zero-downtime-migrations.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2015/08/15/zero-downtime-migrations.html</guid>
        
        <category>rails</category>
        
        <category>database</category>
        
        <category>deploy</category>
        
        <category>heroku</category>
        
        
      </item>
    
      <item>
        <title>Unintended consequences (and a disaster averted)</title>
        <description>&lt;p&gt;I want to tell you a scary-as-shit story, mostly so that my friends that have &lt;a href=&quot;http://en.wikipedia.org/wiki/Concealed_carry&quot;&gt;CCW&lt;/a&gt; permits might read it and not get killed by good intentions, because I love you all.&lt;/p&gt;

&lt;p&gt;One morning, I was waiting for the San Francisco-bound &lt;a href=&quot;http://bart.gov&quot;&gt;BART&lt;/a&gt;, as usual. The crowd kept getting thicker and the train was late. There were grumpy rumblings all around. Finally a train rounds the bend, beeps its whistle, and … continues through the station without stopping.&lt;/p&gt;

&lt;p&gt;What. The. Fuck. And then, even more waiting.&lt;/p&gt;

&lt;p&gt;Suddenly, I see several things, pretty much simultaneously, that my brain had trouble processing at the time: The crowd, in a wave starts stepping back from the edge of the platform, revealing two BART police officers, weapons drawn, waving people back. On the opposite platform, another officer is shouldering a rifle pointed in my general direction. And, &lt;em&gt;then&lt;/em&gt;, behind me, an older guy in a green sweatshirt hits the deck, spread-eagled, face down and shouts at the top of his lungs,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I HAVE A PERMIT!
I.
HAVE.
A.
PERMIT!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The police approach, frisk the man, remove a revolver from a belt clip, and then politely help him to his feet. There’s a brief check of credentials and a collective sigh of relief that this is not some nut-job ready to rain hell and bullets on a morning commute. I overhear the conversation while the next train rolls up to the platform and starts boarding; apparently an observant citizen saw the revolver tucked into the small of the man’s back and called 911. A bad fashion choice could have cost someone’s life that morning, if any number of things did not go perfectly right.&lt;/p&gt;

&lt;p&gt;I like guns. I’ve used them for sport (target practice), nothing more. I’d be willing to hunt with them (as long as we eat or share what we kill and not let it go to waste). Carrying a concealed weapon scares the shit out of me.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jan 2015 19:45:33 -0800</pubDate>
        <link>http://blog.bitwrangler.com/2015/01/06/unintended-consequences-and-a-disaster-averted.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2015/01/06/unintended-consequences-and-a-disaster-averted.html</guid>
        
        
      </item>
    
      <item>
        <title>Timecop time and database time</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/travisjeffery/timecop&quot;&gt;Timecop&lt;/a&gt; is a great addition to your testing toolbox, but if you’ve ever tried to use Timecop to interact with a database, and then got the most mysterious of existential errors:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;expected: Sun, 08 Jun 2014 19:18:22 UTC +00:00
      got: Sun, 08 Jun 2014 19:18:22 UTC +00:00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I feel your pain.&lt;/p&gt;

&lt;p&gt;The trouble comes from the fact that Timecop is freezing time at the resolution of the native Time class, which on my Mac OS X machine is microseconds (aka “usec”), but the database, in this case MySQL only records time to the second. RSpec is trying to be helpful with its matchers by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt;#to_s`, but that hides the significant, sub-second difference.&lt;/p&gt;

&lt;p&gt;Here’s a quick little monkey patch that I added to my spec support:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Timecop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;database_compatible_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;usec: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This uses a Rails helper to reset the microsecond portion of the time object. So, instead of&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Timecop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I do this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timecop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;database_compatible_time&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Timecop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And no more head scratching. It’s sort of database specific, so your mileage may vary.&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Jun 2014 12:36:35 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2014/06/08/timecop-time-and-database-time.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2014/06/08/timecop-time-and-database-time.html</guid>
        
        <category>rails</category>
        
        <category>testing</category>
        
        
      </item>
    
      <item>
        <title>The slow road</title>
        <description>&lt;p&gt;Once a week, we run a query on our production system that takes a very long time to complete. Invariably, it times out because the default settings on Heroku are (quite reasonably) for web / API interactions; anything longer than 30 seconds is too long and the connection should be closed to let other requests through. How do you get around this, then? You could set up your &lt;code class=&quot;highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; file so that you connect to your production database from a developer workstation. This is actually quite useful, but opens up a hellacious security hole. Let’s not get started about the consequences of accidentally running &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:drop:all&lt;/code&gt;! Moreover, you want your system to be automated as much as possible, and that means running your tasks on a Heroku instance. Fortunately, with a little hackery, you can modify the connection timeout settings within your application. Do this carefully, and make sure that it can not leak into your running web application dynos.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raw_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:read_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_connection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ... long running database queries go here ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These settings are database specific, so read the documentation / source. This connection is using the &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; adapter.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jun 2014 08:00:37 -0700</pubDate>
        <link>http://blog.bitwrangler.com/2014/06/01/the-slow-road.html</link>
        <guid isPermaLink="true">http://blog.bitwrangler.com/2014/06/01/the-slow-road.html</guid>
        
        <category>database</category>
        
        <category>heroku</category>
        
        <category>rails</category>
        
        
      </item>
    
  </channel>
</rss>
